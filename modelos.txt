from django.db import models


class Category(models.Model):
    name = models.CharField(max_length=255, unique=True)  # Nombre único

    def __str__(self):
        return self.name


from django.db import models

class Coupon(models.Model):
    code = models.CharField(max_length=20, unique=True)  # Código del cupón (Ej: DESCUENTO5)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2)  # Ej: 5.00 = S/5 de descuento
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.code


from django.db import models
from django.contrib.auth.models import User


class Customer(models.Model):
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name="customer")
    phone = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.user.username


from django.db import models
from .CategoryModel import Category

class Subcategory(models.Model):
    name = models.CharField(max_length=255)
    category = models.ForeignKey(
        Category, on_delete=models.CASCADE, related_name='subcategories')

    def __str__(self):
        return f"{self.name} ({self.category.name})"


from django.db import models
from .CategoryModel import Category
from .SubcategoryModel import Subcategory
import cloudinary.models
from django.utils.timezone import now

class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock = models.PositiveIntegerField(default=0)
    category = models.ForeignKey(
        Category, on_delete=models.CASCADE, related_name='products')
    subcategory = models.ForeignKey(
        Subcategory, on_delete=models.CASCADE, related_name='products', blank=True, null=True)
    image = cloudinary.models.CloudinaryField('image', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def final_price(self):
        if hasattr(self, "discount") and self.discount.start_date <= now() <= self.discount.end_date:
            return self.price - (self.price * self.discount.discount_percentage / 100)
        return self.price

    def __str__(self):
        return self.name

from django.db import models
from.OrderModel import Order


class Payment(models.Model):
    order = models.OneToOneField(Order, on_delete=models.CASCADE, related_name="payment")
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    method = models.CharField(max_length=50, choices=[("card", "Tarjeta"), ("paypal", "PayPal"), ("bank", "Transferencia Bancaria")])
    transaction_id = models.CharField(max_length=255, unique=True)
    paid_at = models.DateTimeField(auto_now_add=True)


from django.db import models
from .CustomerModel import Customer
from .CouponModel import Coupon


class Order(models.Model):
    id = models.AutoField(primary_key=True)
    customer = models.ForeignKey(
        Customer, on_delete=models.CASCADE, related_name="orders")
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    coupon = models.ForeignKey(
        Coupon, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=20, choices=[(
        "pending", "Pendiente"), ("paid", "Pagado"), ("shipped", "Enviado")], default="pending")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Orden {self.id} - {self.customer.user.username}"



from django.db import models
from .OrderModel import Order
from .ProductModel import Product


class OrderItem(models.Model):
    order = models.ForeignKey(
        Order, on_delete=models.CASCADE, related_name="items")
    product = models.ForeignKey(Product, on_delete=models.PROTECT)
    quantity = models.PositiveIntegerField()

    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.quantity} x {self.product.name} en Orden {self.order.id}"


from django.db import models
from .ProductModel import Product


class Discount(models.Model):
    product = models.OneToOneField(
        Product, on_delete=models.CASCADE, related_name="discount")
    discount_percentage = models.DecimalField(
        max_digits=5, decimal_places=2)  # Ej: 10.00 = 10% de descuento
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
